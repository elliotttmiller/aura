name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/static/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend/static
        run: npm ci
      
      - name: Type check
        working-directory: frontend/static
        run: npm run type-check
      
      - name: Lint check
        working-directory: frontend/static
        run: npm run lint
      
      - name: Format check
        working-directory: frontend/static
        run: npm run format:check
      
      - name: Run tests
        working-directory: frontend/static
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Build
        working-directory: frontend/static
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/static/dist
          retention-days: 7

  # Backend Tests
  backend-test:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Black formatter check
        run: black --check backend/ --line-length 100
      
      - name: Run Flake8 linter
        run: flake8 backend/ --max-line-length=100 --exclude=__pycache__
      
      - name: Run isort check
        run: isort --check-only backend/
      
      - name: Run MyPy type checker
        run: mypy backend/ --ignore-missing-imports
        continue-on-error: true
      
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing -v
        continue-on-error: true
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Run npm audit
        working-directory: frontend/static
        run: |
          npm audit --audit-level=moderate
        continue-on-error: true

  # Build Status Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "Frontend Tests: ${{ needs.frontend-test.result }}"
          echo "Backend Tests: ${{ needs.backend-test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          if [ "${{ needs.frontend-test.result }}" != "success" ]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi
          
          if [ "${{ needs.backend-test.result }}" != "success" ]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          
          echo "✅ All checks passed!"
