""" AI Design Assistant - UI Operators ==================================== Professional UI operators for the AI Design Assistant system following the definitive naming doctrine with clean, domain-specific terminology. Pillar 2: Architecting the Live Cognitive & Animation Engine The core asynchronous modal operator that manages the AI conversation and real-time 3D updates with smooth Shape Key transitions. Key Features: - Real-Time Cognitive Streaming: Live updates of AI's multi-step thought process - State-of-the-Art Shape Key Transitions: Smooth animations from 0 to 1 - Asynchronous Supremacy: Non-blocking responsive interface - Professional Domain Terminology: "AI Jewelry Designer" interface naming Implements Protocol 16: The Universal Architecture Mandate - Universal engineering role naming for modules (ui_operators.py) - Professional domain-specific naming for UI elements ("AI Jewelry Designer") """ import bpy import threading import queue import time import json import logging from typing import Dict, Any, Optional from .ai_orchestrator import AiOrchestrator # Setup logging logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__) class AURA_OT_ai_jewelry_designer(bpy.types.Operator): """ AI Design Assistant AI Jewelry Designer Operator.""" bl_idname = "aura.ai_jewelry_designer" bl_label = "AI Jewelry Designer" bl_description = "Professional AI-powered jewelry design with AI Design Assistant quality" bl_category = "Aura" def __init__(self): self.ai_orchestrator = None self.worker_thread = None self.message_queue = queue.Queue() self.is_running = False self.timer_handle = None self.current_shape_key_animation = None def execute(self, context): """Start the AI Jewelry Designer in modal mode.""" logger.info("=== AI JEWELRY DESIGNER ACTIVATED ===") # Initialize AI Orchestrator try: if not self.ai_orchestrator: self.ai_orchestrator = AiOrchestrator() logger.info("‚úÖ AI Orchestrator initialized - AI Design Assistant ready") except ImportError as e: logger.error(f"Failed to initialize AI Orchestrator: {e}") self.report({'ERROR'}, f"AI Jewelry Designer initialization failed: {e}") return {'CANCELLED'} # Start modal operation context.window_manager.modal_handler_add(self) self.is_running = True # : Register timer for real-time cognitive streaming self.timer_handle = bpy.app.timers.register( self.process_messages, first_interval=0.1, persistent=True ) # Update UI to show is active if hasattr(context.scene, 'settings'): context.scene.settings.is_processing = False context.scene.settings.chat_messages = json.dumps([ {"role": "system", "content": "üé® AI Jewelry Designer activated. AI Design Assistant capabilities ready for professional jewelry creation."} ]) return {'RUNNING_MODAL'} return {'RUNNING_MODAL'} def modal(self, context, event): """Modal handler for continuous operation.""" if event.type == 'ESC': self.cancel(context) return {'CANCELLED'} # Continue running return {'PASS_THROUGH'} def process_messages(self): """Timer callback to process messages from worker thread.""" try: while not self.message_queue.empty(): message = self.message_queue.get_nowait() self.handle_message(message) except queue.Empty: pass except Exception as e: logger.error(f"Error processing messages: {e}") # Return interval for next call return 0.1 if self.is_running else None def handle_message(self, message: Dict[str, Any]): """Handle different types of messages from the worker thread.""" msg_type = message.get('type') if msg_type == 'chat_update': self.update_chat_ui(message['content']) elif msg_type == 'shape_key_created': self.animate_shape_key(message['object_name'], message['shape_key_name']) elif msg_type == 'processing_complete': self.handle_processing_complete(message) elif msg_type == 'error': self.handle_error(message['error']) def update_chat_ui(self, content: str): """Update the chat UI with new content.""" try: scene = bpy.context.scene current_messages = json.loads(scene.settings.chat_messages or "[]") current_messages.append({ "role": "assistant", "content": content, "timestamp": time.time() }) scene.settings.chat_messages = json.dumps(current_messages) # Force UI redraw for area in bpy.context.screen.areas: if area.type == 'VIEW_3D': area.tag_redraw() except Exception as e: logger.error(f"Error updating chat UI: {e}") def animate_shape_key(self, object_name: str, shape_key_name: str): """ Pillar 2: State-of-the-Art Shape Key Transitions Animate Shape Key from 0 to 1 with smooth, professional transitions. This creates the fluid visual updates that make AI modifications feel alive. """ try: obj = bpy.data.objects.get(object_name) if not obj or not obj.data.shape_keys: logger.warning(f": Cannot animate - object {object_name} or shape keys not found") return shape_key = obj.data.shape_keys.key_blocks.get(shape_key_name) if not shape_key: logger.warning(f": Shape key {shape_key_name} not found") return logger.info(f": Starting State-of-the-Art Shape Key animation for {shape_key_name}") # Enhancement: Extended animation duration for smooth, visible transition self.current_shape_key_animation = { 'object': obj, 'shape_key': shape_key, 'start_time': time.time(), 'duration': 3.0, # : Longer duration for better visibility 'start_value': 0.0, 'end_value': 1.0, 'animation_type': 'ease_in_out' # : Professional easing } # Start the animation with higher frame rate for smoothness bpy.app.timers.register(self.update_shape_key_animation, first_interval=0.016) # 60 FPS except Exception as e: logger.error(f": Error starting Shape Key animation: {e}") def update_shape_key_animation(self): """ : Update Shape Key animation with professional easing curves. Implements smooth interpolation with ease-in-out curves for professional, fluid transitions that showcase AI modifications. """ if not self.current_shape_key_animation: return None animation = self.current_shape_key_animation elapsed = time.time() - animation['start_time'] progress = min(elapsed / animation['duration'], 1.0) # Enhancement: Professional easing functions if animation.get('animation_type') == 'ease_in_out': # Smooth ease-in-out curve (cubic bezier approximation) if progress < 0.5: smooth_progress = 2 * progress * progress else: smooth_progress = 1 - 2 * (1 - progress) * (1 - progress) else: # Default smooth interpolation smooth_progress = 3 * progress**2 - 2 * progress**3 current_value = animation['start_value'] + (animation['end_value'] - animation['start_value']) * smooth_progress animation['shape_key'].value = current_value # Enhancement: Force viewport update for immediate visual feedback for area in bpy.context.screen.areas: if area.type == 'VIEW_3D': area.tag_redraw() # Continue animation or finish if progress >= 1.0: logger.info(": State-of-the-Art Shape Key animation completed successfully") self.current_shape_key_animation = None return None else: return 0.016 # 60 FPS for ultra-smooth animation def start_ai_processing(self, user_prompt: str, is_refinement: bool = False): """Start AI processing in worker thread.""" if self.worker_thread and self.worker_thread.is_alive(): logger.warning("AI processing already in progress") return # Update UI to show processing state bpy.context.scene.settings.is_processing = True self.update_chat_ui(f"Processing: {user_prompt}") # Start worker thread self.worker_thread = threading.Thread( target=self.ai_worker_thread, args=(user_prompt, is_refinement), daemon=True ) self.worker_thread.start() def ai_worker_thread(self, user_prompt: str, is_refinement: bool): """ Advanced Design AI Architect Worker Thread Enhanced AI worker thread with Advanced Design strategic delegation. Provides step-by-step visibility into AI's strategic decision making for NURBS precision vs Mesh artistry operations. """ try: logger.info(f": Advanced Design AI Architect started for: {user_prompt}") # Get current paradigm context from UI current_paradigm = bpy.context.scene.settings.active_paradigm_tab # Phase 1: Advanced Design Analysis self.message_queue.put({ 'type': 'chat_update', 'content': f"üß† Advanced Design Architect analyzing: {user_prompt}" }) time.sleep(0.5) self.message_queue.put({ 'type': 'chat_update', 'content': f"üéõÔ∏è Active paradigm context: {current_paradigm} ({'NURBS precision' if current_paradigm == 'NURBS' else 'Mesh artistry'})" }) time.sleep(0.3) # Phase 2: Strategic Paradigm Planning self.message_queue.put({ 'type': 'chat_update', 'content': "üß† Strategic planning: Analyzing optimal engine delegation..." }) time.sleep(0.5) self.message_queue.put({ 'type': 'chat_update', 'content': "üîç Analyzing design requirements and constraints..." }) time.sleep(0.3) # Phase 3: AI Architecture Contact self.message_queue.put({ 'type': 'chat_update', 'content': "‚ö° Contacting AI Architect..." }) time.sleep(0.4) # Phase 4: Blueprint Generation self.message_queue.put({ 'type': 'chat_update', 'content': "üìê Generating dynamic construction blueprint..." }) # Phase 3: Execute Advanced Design Design Generation self.message_queue.put({ 'type': 'chat_update', 'content': "üéõÔ∏è Master Dispatcher: Routing to optimal engines..." }) time.sleep(0.5) # Execute the AI Design Assistant jewelry generation result = self.ai_orchestrator.generate_jewelry(user_prompt) # Phase 5: Blueprint Validation if result.get('success'): self.message_queue.put({ 'type': 'chat_update', 'content': "‚úÖ Validating AI Blueprint..." }) time.sleep(0.3) # Phase 6: Blender Engine Launch self.message_queue.put({ 'type': 'chat_update', 'content': "üîß Launching Blender Engine..." }) time.sleep(0.4) # Phase 7: Construction Execution self.message_queue.put({ 'type': 'chat_update', 'content': "üèóÔ∏è Executing construction plan..." }) time.sleep(0.5) # Phase 8: Final Polish self.message_queue.put({ 'type': 'chat_update', 'content': "‚ú® Applying Final Polish..." }) time.sleep(0.3) # Send completion message self.message_queue.put({ 'type': 'processing_complete', 'result': result }) except Exception as e: # Enhanced exception handler with user-friendly categorization logger.error(f": AI worker thread exception: {e}") # Intelligent error classification for better UX if "validation" in str(e).lower(): error_msg = f"üîç Blueprint Validation Error: {str(e)}" elif "network" in str(e).lower() or "connection" in str(e).lower(): error_msg = f"üåê Network Communication Error: Unable to reach AI Master Planner" elif "timeout" in str(e).lower(): error_msg = f"‚è±Ô∏è Processing Timeout: AI Master Planner taking too long to respond" elif "json" in str(e).lower(): error_msg = f"üìã Blueprint Format Error: AI response structure invalid" else: error_msg = f"‚ö†Ô∏è AI Decision: Process halted due to unexpected condition" # Stream clear, categorized error message to UI self.message_queue.put({ 'type': 'error', 'error': error_msg, 'technical_details': str(e) }) logger.info(": Enhanced exception handler completed - user notified") def handle_processing_complete(self, message: Dict[str, Any]): """Handle completion of Advanced Design AI processing.""" result = message['result'] # Update UI bpy.context.scene.settings.is_processing = False if result.get('success') or result.get('status') == 'MULTI_PARADIGM_SUCCESS': # Advanced Design success message paradigm_distribution = result.get('paradigm_execution', {}).get('paradigm_distribution', {}) nurbs_count = paradigm_distribution.get('NURBS', 0) mesh_count = paradigm_distribution.get('MESH', 0) success_msg = f"‚úÖ Advanced Design Success! Created {nurbs_count} NURBS + {mesh_count} MESH operations" self.update_chat_ui(success_msg) # Show architecture information if result.get('architecture'): self.update_chat_ui(f"üèóÔ∏è Architecture: {result['architecture']}") # Show execution time if result.get('execution_time_seconds'): self.update_chat_ui(f"‚ö° Completed in {result['execution_time_seconds']}s") elif result.get('status') == 'SYMBIOTIC_SUCCESS': # fallback success self.update_chat_ui("‚úÖ Symbiotic Success - NURBS precision achieved!") else: self.update_chat_ui(f"Error: {result.get('error', 'Unknown error')}") def handle_error(self, error_message: str): """ Enhanced error handler with clear, user-friendly error display. Implements colored error messages and detailed logging for complete transparency as specified in Sentient Transparency protocol. """ bpy.context.scene.settings.is_processing = False # : Color-coded error message for UI distinction formatted_error = f"‚ùå {error_message}" self.update_chat_ui(formatted_error) logger.error(f": Worker thread error handled and displayed to user: {error_message}") # Enhancement: Additional status update for complete transparency bpy.context.scene.settings.status_message = "Error - See chat for details" def cancel(self, context): """Cancel the Verifiable Artisan and clean up resources.""" logger.info("Cancelling Verifiable Artisan") self.is_running = False # Remove timer if self.timer_handle: try: bpy.app.timers.unregister(self.timer_handle) except: pass self.timer_handle = None # : Gracefully stop worker thread if self.worker_thread and self.worker_thread.is_alive(): # Note: threading.Thread doesn't have a built-in way to stop gracefully # The thread will finish its current operation and exit pass # Clean up UI state context.scene.settings.is_processing = False return {'CANCELLED'} # Properties for the Design Engine system class EngineBaseSettings(bpy.types.PropertyGroup): """Settings for the Design Engine system.""" is_processing: bpy.props.BoolProperty( name="Is Processing", description="Whether AI is currently processing", default=False ) chat_messages: bpy.props.StringProperty( name="Chat Messages", description="JSON string containing chat history", default="" ) current_prompt: bpy.props.StringProperty( name="Current Prompt", description="Current user prompt", default="" ) def register(): bpy.utils.register_class(EngineBaseSettings) bpy.types.Scene.settings_base = bpy.props.PointerProperty(type=EngineBaseSettings) def unregister(): if hasattr(bpy.types.Scene, 'settings_base'): del bpy.types.Scene.settings_base bpy.utils.unregister_class(EngineBaseSettings)