import bpy from backend.backend import check_dependencies from .settings import install_settings, uninstall_settings from .backend.preferences import AddonPreferences, install_preferences, uninstall_preferences from .frontend.tool_panel import ChatPanel, GenerateOperator, ModalOperator, ToggleSidebarOperator, SwitchParadigmOperator from .backend.ui_operators import AURA_OT_ai_jewelry_designer ALL_CLASSES = [ AddonPreferences, ChatPanel, GenerateOperator, ModalOperator, ToggleSidebarOperator, SwitchParadigmOperator, AURA_OT_ai_jewelry_designer, ] def create_design_workspace(): """ AI Design Assistant: Create the "AI Jewelry Designer" workspace Create the dedicated professional workspace optimized for AI jewelry design. - Clean, focused UI with professional jewelry design tools - Leave only 3D Viewport and AI Jewelry Designer sidebar - Optimized for seamless AI-driven jewelry creation workflow """ print(": Creating AI Jewelry Designer professional workspace...") # Create new workspace named "Aura" as specified workspace_name = "Aura" if workspace_name not in bpy.data.workspaces: workspace = bpy.data.workspaces.new(workspace_name) # Get the first screen from the workspace screen = workspace.screens[0] # Enhancement: Create clean, professional jewelry design layout # Clear all existing areas and create single 3D viewport for area in screen.areas: area.type = 'VIEW_3D' # Set workspace as active to configure bpy.context.window.workspace = workspace # Professional Mode: Configure 3D viewport for optimal jewelry design for area in bpy.context.screen.areas: if area.type == 'VIEW_3D': for space in area.spaces: if space.type == 'VIEW_3D': # Show the professional AI Jewelry Designer sidebar space.show_region_ui = True # Enhancement: Optimal shading for jewelry visualization space.shading.type = 'MATERIAL' space.shading.use_scene_lights_render = True space.shading.use_scene_world_render = True # Enhancement: Hide non-essential UI for professional focus space.show_region_header = True # Keep header for essential controls space.show_region_toolbar = False # Hide tool toolbar for clean experience space.show_region_hud = False # Hide HUD for professional minimalism # Enhancement: Ensure Aura sidebar is visible and selected for region in area.regions: if region.type == 'UI': # The sidebar will default to the Aura category due to bl_category = 'Aura' break break break # Set Aura workspace as active (this becomes the default) bpy.context.window.workspace = bpy.data.workspaces[workspace_name] print(": AI Jewelry Designer workspace created and activated - Professional jewelry design experience ready") def install(): print("Installing AI Design Assistant...") # Perform dependency check if not check_dependencies(report_error=False): print(" AI Design Assistant Warning: Critical dependencies not found. Some AI features may be disabled.") install_settings() install_preferences() # Register all classes for cls in ALL_CLASSES: bpy.utils.register_class(cls) # : Create the professional AI Jewelry Designer workspace bpy.app.timers.register(create_design_workspace, first_interval=0.1) print(" AI Design Assistant installed successfully") def uninstall(): print("Uninstalling AI Design Assistant...") # Unregister classes in reverse order for cls in reversed(ALL_CLASSES): bpy.utils.unregister_class(cls) uninstall_preferences() uninstall_settings() # Remove Aura workspace workspace_name = "Aura" if workspace_name in bpy.data.workspaces: bpy.data.workspaces.remove(bpy.data.workspaces[workspace_name]) print(" AI Design Assistant uninstalled successfully") 