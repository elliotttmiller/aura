# python 2 import rhinoscriptsyntax as rs import scriptcontext as sc import Rhino.Geometry as rg import Rhino.Display as rd import os import Rhino import Eto import Eto.Drawing as drawing import Eto.Forms as forms import math import SpatialData import System import scriptcontext as sc from components import ComponentGenerator as cg from pipeline import DrawConduit from pipeline import ColorsAndMaterials as cam macro = rs.AliasMacro('wdGem') wd1gem_script = macro.replace('!_-RunPythonScript ', '') wd1gem_script = wd1gem_script.replace('"', '') scriptfolder = os.path.dirname(wd1gem_script) kit_folder = os.path.dirname(scriptfolder) gem_folder = os.path.join(kit_folder, "gems") is_free = True if 'Free' in kit_folder else False class GemTypes: Fancy = "Fancy" Simple = "Simple" Cabochons = "Cabochons" Cutters = "Cutters" Outlines = "Outlines" def GetShapeList(gemtype): shapes = [] if gemtype == GemTypes.Fancy: folder = os.path.join(gem_folder, "1Fancy") elif gemtype == GemTypes.Simple: folder = os.path.join(gem_folder, "2Simple") elif gemtype == GemTypes.Cabochons: folder = os.path.join(gem_folder, "4Cabochons") filenames = os.listdir(folder) for filename in filenames: name = filename.replace(".3dm", "") shapes.append(name) return shapes fancy_shapes = GetShapeList(GemTypes.Fancy) simple_shapes = GetShapeList(GemTypes.Simple) cab_shapes = GetShapeList(GemTypes.Cabochons) class wdDialog(forms.Dialog): def __init__(self): super(wdDialog, self).__init__() self.GemType = 'Fancy' self.GemShape = 'Round' self.GemWidth = 0.0 self.GemLength = 0.0 self.GemDepth = 0.0 self.GemID = '' self.Gem = None self.OriginalGem = None self.AxialData = None self.WidthSF = 1 self.LengthSF = 1 self.DepthSF = 1 # form stuff self.Title = "Gem Loader" self.Padding = drawing.Padding(15) self.LabelWidth = 40 self.DropDownWidth = 100 self.TextBoxWidth = 100 self.Closing += self.OnGemFormClosing if rs.ExeVersion() >= 8: Rhino.UI.EtoExtensions.UseRhinoStyle(self) # overlay stuff self.Conduit = DrawConduit(self) self.Conduit.Enabled = True self.RenderObjects = [] self.EdgeCurves = [] self.Conduit.EdgeColor = cam.GemColorLight # full version message self.lbl_full_version_msg = cg.CreateLabel("The full version has 23 more gems.") self.lbl_full_version_msg.TextAlignment = forms.TextAlignment.Center self.lbl_full_version_msg.TextColor = drawing.Colors.Red # main controls self.GemTypeDropDownGroup, self.GemTypeDropDown = cg.CreateDropDownGroup("Type:", self.LabelWidth, [GemTypes.Fancy, GemTypes.Simple, GemTypes.Cabochons], self.OnFormChanged) self.GemShapeDropDownGroup, self.GemShapeDropDown = cg.CreateDropDownGroup("Shape:", self.LabelWidth, fancy_shapes, self.OnFormChanged) self.WidthTextBoxGroup, self.WidthTextBox = cg.CreateTextBoxGroup("Width:", self.LabelWidth, "", self.OnFormChanged) self.LengthTextBoxGroup, self.LengthTextBox = cg.CreateTextBoxGroup("Length:", self.LabelWidth, "", self.OnFormChanged) self.HeightTextBoxGroup, self.HeightTextBox = cg.CreateTextBoxGroup("Height:", self.LabelWidth, "", self.OnFormChanged) self.GemShapeDropDown.SelectedValue = "Round" # some styling self.GemTypeDropDown.Width = self.DropDownWidth self.GemShapeDropDown.Width = self.DropDownWidth self.WidthTextBox.Width = self.TextBoxWidth self.LengthTextBox.Width = self.TextBoxWidth self.HeightTextBox.Width = self.TextBoxWidth # OK/Cancel Buttons self.FinalizeButton = cg.CreateButton("Finalize", self.OnFinalizeButtonClick) self.CancelButton = cg.CreateButton("Cancel", self.OnCancelButtonClick) self.AbortButton = self.CancelButton self.DefaultButton = self.FinalizeButton # Dialog Layout layout_dlg = forms.DynamicLayout() layout_dlg.DefaultSpacing = drawing.Size(5,5) layout_dlg.BeginVertical() layout_dlg.AddRow(self.GemTypeDropDownGroup) layout_dlg.AddRow(self.GemShapeDropDownGroup) layout_dlg.AddRow(None) layout_dlg.AddRow(self.WidthTextBoxGroup) layout_dlg.AddRow(self.LengthTextBoxGroup) layout_dlg.AddRow(self.HeightTextBoxGroup) layout_dlg.EndVertical() layout_dlg.BeginVertical() layout_dlg.AddRow(None) layout_dlg.AddRow(None) layout_dlg.AddRow(None) layout_dlg.AddRow(self.FinalizeButton) layout_dlg.AddRow(self.CancelButton) if is_free: layout_dlg.AddSeparateRow(self.lbl_full_version_msg) layout_dlg.EndVertical() self.Content = layout_dlg self.Solve(self) ### End Dialog Initialization def DisposeObject(self, ob): if hasattr(ob,'Dispose'): ob.Dispose() def DisposeObjects(self, obs): for ob in obs: self.DisposeObject(ob) def DisposeRenderObjects(self): if hasattr(self, 'RenderObjects'): for ob in self.RenderObjects: self.DisposeObject(ob) self.RenderObjects = [] if hasattr(self, 'EdgeCurves'): for ob in self.EdgeCurves: self.DisposeObject(ob) self.EdgeCurves = [] def LoadGem(self): shape = self.GemShapeDropDown.SelectedValue gemfolder = scriptfolder.replace("scripts", "gems") gemtypefolder = self.GetGemTypeFolder() filename = shape + ".3dm" fullpath = os.path.join(gemfolder, gemtypefolder, filename) gem_file = Rhino.FileIO.File3dm.Read(fullpath) self.OriginalGem = gem_file.Objects.FindByLayer('gems')[0].Geometry if self.GemTypeDropDown.SelectedValue == GemTypes.Cabochons: self.OriginalGem.Translate(0, 0, -0.0001) self.AxialData = SpatialData.CaptureAxialData(self.OriginalGem) self.OriginalGem.Translate(0, 0, 0.0001) else: self.AxialData = SpatialData.CaptureAxialData(self.OriginalGem) def GetGemTypeFolder(self): folder = "" dir_items = os.listdir(scriptfolder.replace("scripts", "gems")) for item in dir_items: if self.GemTypeDropDown.SelectedValue in item: folder = item return folder def OnFormChanged(self, sender, e): self.Solve(sender) def OnFinalizeButtonClick(self, sender, e): layer_name = 'gems' if not rs.IsLayer(layer_name): rs.AddLayer(layer_name, System.Drawing.Color.FromArgb(150, 200, 255)) layer = sc.doc.Layers.FindName(layer_name) atts = Rhino.DocObjects.ObjectAttributes() atts.LayerIndex = layer.Index self.GemID = sc.doc.Objects.AddBrep(self.Gem, atts) rs.ObjectName(self.GemID, 'wdGem') SpatialData.WriteSpatialData(self.GemID, self.AxialData, [self.WidthSF, self.LengthSF, self.DepthSF]) bbox = self.Gem.GetBoundingBox(True) width = round(bbox.Max.X - bbox.Min.X, 2) length = round(bbox.Max.Y - bbox.Min.Y, 2) depth = round(bbox.Max.Z - bbox.Min.Z, 2) rs.SetUserText(self.GemID, 'width', str(width)) rs.SetUserText(self.GemID, 'length', str(length)) rs.SetUserText(self.GemID, 'depth', str(depth)) rs.SetUserText(self.GemID, 'type', self.GemTypeDropDown.SelectedValue) rs.SetUserText(self.GemID, 'shape', self.GemShapeDropDown.SelectedValue) # set up planar texture mapping to cabochons if self.GemType == GemTypes.Cabochons: mapping = Rhino.Render.TextureMapping.CreatePlaneMapping(rg.Plane.WorldXY, rg.Interval(bbox.Min.X-0.1, bbox.Max.X+0.1), rg.Interval(bbox.Min.Y-0.1, bbox.Max.Y+0.1), rg.Interval(0, 3), True) sc.doc.Objects.ModifyTextureMapping(self.GemID, 1, mapping) self.DisposeObject(self.Gem) self.DisposeObject(self.OriginalGem) self.DisposeRenderObjects() self.Close() def OnCancelButtonClick(self, sender, e): self.Close() def OnGemFormClosing(self, sender, e): self.Conduit.Enabled = False def GetValue(self, txt): value = 0.0 try: value = float(txt) except: value = 0.0 return value def MeshFromBrep(self, brep): meshing_params = Rhino.Geometry.MeshingParameters.QualityRenderMesh meshes = Rhino.Geometry.Mesh.CreateFromBrep(brep, meshing_params) the_mesh = Rhino.Geometry.Mesh() for mesh in meshes: the_mesh.Append(mesh) the_mesh.Normals.ComputeNormals() return the_mesh def AddEdgeCurves(self, brep): for edge in brep.Edges: crv = edge.DuplicateCurve() if crv.IsValid: self.EdgeCurves.append(crv) def Solve(self, sender): self.DisposeRenderObjects() # update inputs if sender == self.GemTypeDropDown: self.GemShapeDropDown.SelectedValueChanged -= self.OnFormChanged if self.GemTypeDropDown.SelectedValue == GemTypes.Fancy: self.GemShapeDropDown.DataStore = fancy_shapes elif self.GemTypeDropDown.SelectedValue == GemTypes.Simple: self.GemShapeDropDown.DataStore = simple_shapes elif self.GemTypeDropDown.SelectedValue == GemTypes.Cabochons: self.GemShapeDropDown.DataStore = cab_shapes else: # this should never happen, but, if it does, # I guess we should default to the fancy shapes? self.GemShapeDropDown.DataStore = fancy_shapes shape_exists = False for item in fancy_shapes: if item == self.GemShapeDropDown.SelectedValue: shape_exists = True break if not shape_exists: self.GemShapeDropDown.SelectedIndex = 0 self.GemShapeDropDown.SelectedValueChanged += self.OnFormChanged self.GemType = self.GemTypeDropDown.SelectedValue self.GemShape = self.GemShapeDropDown.SelectedValue self.GemWidth = self.GetValue(self.WidthTextBox.Text) self.GemLength = self.GetValue(self.LengthTextBox.Text) self.GemDepth = self.GetValue(self.HeightTextBox.Text) if not self.OriginalGem: self.LoadGem() if sender == self.GemTypeDropDown: self.LoadGem() if sender == self.GemShapeDropDown: self.LoadGem() bbox = self.OriginalGem.GetBoundingBox(True) original_width = bbox.Max.X - bbox.Min.X original_length = bbox.Max.Y - bbox.Min.Y original_depth = bbox.Max.Z - bbox.Min.Z if self.GemWidth > 0: # width will be the base for blank dimensions self.WidthSF = self.GemWidth / original_width if self.GemWidth > 0 else 1 self.LengthSF = self.GemLength / original_length if self.GemLength > 0 else self.WidthSF self.DepthSF = self.GemDepth / original_depth if self.GemDepth > 0 else self.WidthSF elif self.GemLength > 0: # length will be the base for blank dimensions self.LengthSF = self.GemLength / original_length if self.GemLength > 0 else 1 self.WidthSF = self.GemWidth / original_width if self.GemWidth > 0 else self.LengthSF self.DepthSF = self.GemDepth / original_depth if self.GemDepth > 0 else self.LengthSF elif self.GemDepth > 0: # depth will be the base for blank dimensions self.DepthSF = self.GemDepth / original_depth if self.GemDepth > 0 else 1 self.LengthSF = self.GemLength / original_length if self.GemLength > 0 else self.DepthSF self.WidthSF = self.GemWidth / original_width if self.GemWidth > 0 else self.DepthSF else: # probably all three dimensions are blank, but if not # we will default to using the width scale factor as the base for blank dimensions self.WidthSF = self.GemWidth / original_width if self.GemWidth > 0 else 1 self.LengthSF = self.GemLength / original_length if self.GemLength > 0 else self.WidthSF self.DepthSF = self.GemDepth / original_depth if self.GemDepth > 0 else self.WidthSF if self.Gem: self.Gem.Dispose() self.Gem = self.OriginalGem.DuplicateBrep() xform = rg.Transform.Scale(rg.Plane.WorldXY, self.WidthSF, self.LengthSF, self.DepthSF) self.Gem.Transform(xform) self.RenderObjects = [] # self.RenderObjects.append([self.Gem, cam.GemMaterialLight]) self.RenderObjects.append([self.MeshFromBrep(self.Gem), cam.GemMaterialLight]) self.AddEdgeCurves(self.Gem) # redraw sc.doc.Views.Redraw() def ShowDialog(dialog, semimodal): if semimodal: Rhino.UI.EtoExtensions.ShowSemiModal(dialog, Rhino.RhinoDoc.ActiveDoc, Rhino.UI.RhinoEtoApp.MainWindow) else: results = dialog.ShowModal(Rhino.UI.RhinoEtoApp.MainWindow) # the main code if __name__ == "__main__": dialog = wdDialog() if rs.ExeVersion() > 6: parent = Rhino.UI.RhinoEtoApp.MainWindowForDocument(sc.doc) else: parent = Rhino.UI.RhinoEtoApp.MainWindow Rhino.UI.EtoExtensions.ShowSemiModal(dialog, sc.doc, parent) 