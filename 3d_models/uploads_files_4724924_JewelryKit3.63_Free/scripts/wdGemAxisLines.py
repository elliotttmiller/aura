#! python 2 import System from System.Collections.Generic import List import rhinoscriptsyntax as rs import scriptcontext as sc import Rhino import Rhino.Geometry as rg import os import Eto import Eto.Drawing as drawing import Eto.Forms as forms import math from sliders import SliderGroup import SpatialData import Rhino.RhinoApp as app from components import ComponentGenerator as cg from pipeline import DrawConduit from pipeline import ColorsAndMaterials as cam macro = rs.AliasMacro('wdGem') wd1gem_script = macro.replace('!_-RunPythonScript ', '') wd1gem_script = wd1gem_script.replace('"', '') script_folder = os.path.dirname(wd1gem_script) data_folder = os.path.join(script_folder, "data") is_free = True if "Free" in script_folder else False def IsGem(rhino_ob, geo, component_index): is_gem = False name = rhino_ob.Name if name == 'wdGem': is_gem = True return is_gem class wdDialog(forms.Dialog): def __init__(self): super(wdDialog, self).__init__() # form stuff self.LabelWidth = 66 self.Title = 'Gem Axis Lines' self.Padding = drawing.Padding(15) self.AutoSize = True self.Layout = None self.Closing += self.OnDialogClosing if rs.ExeVersion() >= 8: Rhino.UI.EtoExtensions.UseRhinoStyle(self) # overlay visualization stuff self.Conduit = DrawConduit(self) self.Conduit.Enabled = True self.RenderObjects = [] self.EdgeCurves = [] # handy variables self.GemIDs = [] self.BasePlanes = [] self.XAxes = [] self.YAxes = [] self.ZAxes = [] self.Points = [] # input controls self.XCheckBoxGroup, self.XCheckBox = cg.CreateCheckBoxGroup('X Axis: ', self.LabelWidth, True, self.OnFormChanged) self.YCheckBoxGroup, self.YCheckBox = cg.CreateCheckBoxGroup('Y Axis: ', self.LabelWidth, True, self.OnFormChanged) self.ZCheckBoxGroup, self.ZCheckBox = cg.CreateCheckBoxGroup('Z Axis: ', self.LabelWidth, True, self.OnFormChanged) self.XSliderGroup = cg.CreateSliderGroup('Width : ', self.LabelWidth, 0.0, 5.0, 2, 0.0, self.Solve) self.YSliderGroup = cg.CreateSliderGroup('Length: ', self.LabelWidth, 0.0, 5.0, 2, 0.0, self.Solve) self.Z1SliderGroup = cg.CreateSliderGroup('Height: ', self.LabelWidth, 0.0, 5.0, 2, 0.0, self.Solve) self.Z2SliderGroup = cg.CreateSliderGroup('Depth: ', self.LabelWidth, 0.0, 15.0, 2, 0.0, self.Solve) # bottom buttons self.SetButton = cg.CreateButton('Set Gems', self.OnSetButtonClick) self.FinalizeButton = cg.CreateButton('Finalize', self.OnFinalizeButtonClick) self.CancelButton = cg.CreateButton('Cancel', self.OnCancelButtonClick) # the default button must be set for Macs (might as well set the abort button, too.) self.DefaultButton = self.SetButton self.AbortButton = self.CancelButton # lay it out and run the solver self.LayoutForm() self.Solve(self) def DisposeObject(self, ob): if hasattr(ob,'Dispose'): ob.Dispose() def DisposeObjects(self, obs): for ob in obs: self.DisposeObject(ob) def DisposeRenderObjects(self): if hasattr(self, 'RenderObjects'): for ob in self.RenderObjects: self.DisposeObject(ob) if hasattr(self, 'EdgeCurves'): for ob in self.EdgeCurves: self.DisposeObject(ob) def LayoutForm(self): if self.Layout: self.Layout.Clear() self.Layout = forms.DynamicLayout() self.Layout.DefaultSpacing = drawing.Size(5,5) self.Layout.BeginVertical() self.Layout.AddRow(self.XCheckBoxGroup) self.Layout.AddRow(self.YCheckBoxGroup) self.Layout.AddRow(self.ZCheckBoxGroup) self.Layout.AddRow(cg.CreateVerticalSpacer(5)) self.Layout.AddRow(cg.CreateHR()) self.Layout.AddRow(cg.CreateVerticalSpacer(5)) self.Layout.AddRow(self.XSliderGroup) self.Layout.AddRow(self.YSliderGroup) self.Layout.AddRow(self.Z1SliderGroup) self.Layout.AddRow(self.Z2SliderGroup) self.Layout.EndVertical() self.Layout.BeginVertical() self.Layout.AddRow(cg.CreateVerticalSpacer(15)) self.Layout.AddSpace() self.Layout.AddRow(None, self.SetButton, self.FinalizeButton, self.CancelButton) self.Layout.EndVertical() self.Layout.Create() self.Content = self.Layout def OnCancelButtonClick(self, sender, e): self.Close() def OnDialogClosing(self, sender, e): self.Conduit.Enabled = False def OnFinalizeButtonClick(self, sender, e): if len(self.GemIDs) > 0: # get layer (create it if it doesn't exist) if not rs.IsLayer('gem axis'): rs.AddLayer('gem axis', System.Drawing.Color.White, True, False, None) layer = sc.doc.Layers.FindName('gem axis') atts = Rhino.DocObjects.ObjectAttributes() atts.LayerIndex = layer.Index # add objects to document axis_groups = [] all_axes = [] for i in range(len(self.GemIDs)): axis_ids = [] if len(self.XAxes) > 0: axis_id = sc.doc.Objects.AddCurve(self.XAxes[i], atts) axis_ids.append(axis_id) all_axes.append(axis_id) if len(self.YAxes) > 0: axis_id = sc.doc.Objects.AddCurve(self.YAxes[i], atts) axis_ids.append(axis_id) all_axes.append(axis_id) if len(self.ZAxes) > 0: axis_id = sc.doc.Objects.AddCurve(self.ZAxes[i], atts) axis_ids.append(axis_id) all_axes.append(axis_id) # make group, if needed if len(axis_ids) > 1: grp = rs.AddGroup() rs.AddObjectsToGroup(axis_ids, grp) axis_groups.append(axis_ids) if len(all_axes) > 1: grp = rs.AddGroup() for axis in all_axes: rs.AddObjectsToGroup(axis, grp) sc.doc.Views.Redraw() self.DisposeObjects(self.BasePlanes) self.DisposeObjects(self.XAxes) self.DisposeObjects(self.YAxes) self.DisposeObjects(self.ZAxes) self.DisposeRenderObjects() self.Close() def OnFormChanged(self, sender, e): self.LayoutForm() self.Solve(sender) def OnSetButtonClick(self, sender, e): Rhino.UI.EtoExtensions.PushPickButton(self, self.OnPushPickButton) def OnPushPickButton(self, sender, e): try: self.SetGems(sender) except Exception as e: app.WriteLine("line 167: " + str(e)) def SetGems(self, sender): gem_ids = [] selected_obs = rs.GetObjects('Select one or more gems to add cutters to', rs.filter.polysurface, preselect = True, select=False, custom_filter = IsGem) if selected_obs: for ob in selected_obs: name = rs.ObjectName(ob) if name == 'wdGem': gem_ids.append(ob) if len(gem_ids) == 0: rs.MessageBox('No gems were selected.') else: self.GemIDs = gem_ids for gem_id in gem_ids: gem_pln = SpatialData.GetPlane(gem_id) self.BasePlanes.append(gem_pln) self.Solve(sender) def Solve(self, sender): self.DisposeObjects(self.XAxes) self.DisposeObjects(self.YAxes) self.DisposeObjects(self.ZAxes) self.DisposeRenderObjects() self.XAxes = [] self.YAxes = [] self.ZAxes = [] self.Points = [] self.RenderObjects = [] self.EdgeCurves = [] for i in range(len(self.GemIDs)): gem_id = self.GemIDs[i] gem_pln = self.BasePlanes[i] # get import gem distances (from world origin) gem = rs.coercebrep(gem_id) bbox = gem.GetBoundingBox(gem_pln) gem_front = bbox.Min.Y gem_back = bbox.Max.Y gem_right = bbox.Max.X gem_left = bbox.Min.X gem_top = bbox.Max.Z gem_bottom = bbox.Min.Z # get extra distances from sliders extra_x = self.XSliderGroup.Value extra_y = self.YSliderGroup.Value extra_z1 = self.Z1SliderGroup.Value extra_z2 = self.Z2SliderGroup.Value # create lines xform = rg.Transform.PlaneToPlane(rg.Plane.WorldXY, gem_pln) if self.XCheckBox.Checked: pnt_right = rg.Point3d(gem_right + extra_x, 0, 0) pnt_left = rg.Point3d(gem_left - extra_x, 0, 0) x_axis = rg.Line(pnt_left, pnt_right).ToNurbsCurve() x_axis.Transform(xform) self.XAxes.append(x_axis) pnt_right.Transform(xform) pnt_left.Transform(xform) self.Points.append(pnt_right) self.Points.append(pnt_left) if self.YCheckBox.Checked: pnt_front = rg.Point3d(0, gem_front - extra_y, 0) pnt_back = rg.Point3d(0, gem_back + extra_y, 0) y_axis = rg.Line(pnt_front, pnt_back).ToNurbsCurve() y_axis.Transform(xform) self.YAxes.append(y_axis) pnt_front.Transform(xform) pnt_back.Transform(xform) self.Points.append(pnt_front) self.Points.append(pnt_back) if self.ZCheckBox.Checked: pnt_top = rg.Point3d(0, 0, gem_top + extra_z1) pnt_bottom = rg.Point3d(0, 0, gem_bottom - extra_z2) z_axis = rg.Line(pnt_bottom, pnt_top).ToNurbsCurve() z_axis.Transform(xform) self.ZAxes.append(z_axis) pnt_top.Transform(xform) pnt_bottom.Transform(xform) self.Points.append(pnt_top) self.Points.append(pnt_bottom) self.RenderObjects = [] for pnt in self.Points: self.RenderObjects.append([pnt, cam.PointColor]) for axis in self.XAxes: self.RenderObjects.append([axis, cam.PointColor]) for axis in self.YAxes: self.RenderObjects.append([axis, cam.PointColor]) for axis in self.ZAxes: self.RenderObjects.append([axis, cam.PointColor]) # redraw sc.doc.Views.Redraw() # the main code if __name__ == "__main__": dialog = wdDialog() if rs.ExeVersion() > 6: parent = Rhino.UI.RhinoEtoApp.MainWindowForDocument(sc.doc) else: parent = Rhino.UI.RhinoEtoApp.MainWindow Rhino.UI.EtoExtensions.ShowSemiModal(dialog, sc.doc, parent)