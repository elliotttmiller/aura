#! python 2 import System import rhinoscriptsyntax as rs import scriptcontext as sc import Rhino import Rhino.Geometry as rg import os import Eto import Eto.Drawing as drawing import Eto.Forms as forms import math import webbrowser from pipeline import DrawConduit from pipeline import ColorsAndMaterials as cam from components import ComponentGenerator as cg macro = rs.AliasMacro('wdGem') wd1gem_script = macro.replace('!_-RunPythonScript ', '') wd1gem_script = wd1gem_script.replace('"', '') script_folder = os.path.dirname(wd1gem_script) data_folder = os.path.join(script_folder, "data") is_free = False if "Free" in script_folder: is_free = True class wdDialog(forms.Dialog): def __init__(self): super(wdDialog, self).__init__() # form stuff self.LabelWidth = 80 self.Title = 'Ring Diameter Tool' self.Padding = drawing.Padding(15) self.AutoSize = True self.Layout = None self.Closing += self.OnDialogClosing if rs.ExeVersion() >= 8: Rhino.UI.EtoExtensions.UseRhinoStyle(self) # overlay visualization stuff self.Conduit = DrawConduit(self) self.Conduit.Enabled = True self.RenderObjects = [] # self.TempObs = [] # output self.SizingCircle = None self.Seam = None # input controls self.DiameterSG = cg.CreateSliderGroup('Diameter: ', self.LabelWidth, 10.0, 30.0, 2, 15.0, self.Solve) self.SeamPositionRBLG, self.SeamPositionRBL = cg.CreateRadioButtonListGroup('Seam Position: ', self.LabelWidth, ['Top', 'Bottom'], self.OnFormChanged, default_index = 1) # bottom buttons self.OKButton = cg.CreateButton('Finalize', self.OnFinalize) self.CancelButton = cg.CreateButton('Cancel', self.OnCancelButtonClick) # the default button must be set for Macs (might as well set the abort button, too.) self.DefaultButton = self.OKButton self.AbortButton = self.CancelButton # lay it out and run the solver self.LayoutForm() self.Solve(self) def DisposeObject(self, ob): if hasattr(ob,'Dispose'): ob.Dispose() def DisposeObjects(self, obs): for ob in obs: self.DisposeObject(ob) def DisposeRenderObjects(self): if hasattr(self, 'RenderObjects'): for ob in self.RenderObjects: self.DisposeObject(ob) if hasattr(self, 'EdgeCurves'): for ob in self.EdgeCurves: self.DisposeObject(ob) self.RenderObjects = [] self.EdgeCurves = [] def DisposeTempObs(self): if hasattr(self, 'TempObs'): for ob in self.TempObs: if isinstance(ob, list): for x in ob: self.DisposeObject(x) else: self.DisposeObject(x) self.TempObs = [] def LayoutForm(self): if self.Layout: self.Layout.Clear() self.Layout = forms.DynamicLayout() self.Layout.DefaultSpacing = drawing.Size(5,5) self.Layout.BeginVertical() self.Layout.AddRow(self.DiameterSG) self.Layout.AddRow(self.SeamPositionRBLG) self.Layout.EndVertical() self.Layout.BeginVertical() self.Layout.AddRow(cg.CreateVerticalSpacer(5)) self.Layout.AddSpace() self.Layout.AddRow(None, self.OKButton, self.CancelButton) self.Layout.EndVertical() self.Layout.Create() self.Content = self.Layout def OnDialogClosing(self, sender, e): self.Conduit.Enabled = False def OnFinalize(self, sender, e): if not rs.IsLayer('sizing circle'): rs.AddLayer('sizing circle', System.Drawing.Color.FromArgb(255, 100, 12, 12)) circle_id = sc.doc.Objects.AddCurve(self.SizingCircle) rs.ObjectLayer(circle_id, 'sizing circle') rs.ObjectName(circle_id, 'Size: ' + str(self.DiameterSG.Value) + 'mm') self.DisposeRenderObjects() self.DisposeTempObs() self.DisposeObject(self.SizingCircle) self.Close() def OnCancelButtonClick(self, sender, e): self.Close() def OnFormChanged(self, sender, e): self.Solve(sender) def Solve(self, sender): self.DisposeRenderObjects() self.DisposeTempObs() d = self.DiameterSG.Value r = d/2 circle = rg.Circle(rg.Plane.WorldZX, r).ToNurbsCurve() if self.SeamPositionRBL.SelectedIndex == 1: circle.Rotate(math.radians(180), rg.Plane.WorldZX.ZAxis, rg.Point3d.Origin) self.SizingCircle = circle self.Seam = circle.PointAtStart self.RenderObjects.append([self.SizingCircle, cam.CurveColor]) self.RenderObjects.append([self.Seam, cam.PointColor]) sc.doc.Views.Redraw() if __name__ == '__main__': dialog = wdDialog() if rs.ExeVersion() > 6: parent = Rhino.UI.RhinoEtoApp.MainWindowForDocument(sc.doc) else: parent = Rhino.UI.RhinoEtoApp.MainWindow Rhino.UI.EtoExtensions.ShowSemiModal(dialog, sc.doc, parent) 