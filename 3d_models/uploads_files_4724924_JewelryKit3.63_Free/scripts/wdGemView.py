#! python 2 import rhinoscriptsyntax as rs import scriptcontext as sc import Rhino import Rhino.Geometry as rg import Rhino.Display as rd import os import math import SpatialData as sd from Rhino import RhinoApp as app macro = rs.AliasMacro('wdGem') wd1gem_script = macro.replace('!_-RunPythonScript ', '') wd1gem_script = wd1gem_script.replace('"', '') script_folder = os.path.dirname(wd1gem_script) data_folder = os.path.join(script_folder, "data") is_free = True if "Free" in script_folder else False def IsGem(rhino_ob, geo, component_index): is_gem = False name = rhino_ob.Name if name == 'wdGem': is_gem = True return is_gem def RotatePlane90(plane, axis): angle = math.radians(90) new_plane = rg.Plane(plane) new_plane.Rotate(angle, axis) return new_plane def GetGemFrontPlane(gem_plane): return (RotatePlane90(gem_plane, gem_plane.XAxis)) def GetGemRightPlane(gem_plane): front_plane = GetGemFrontPlane(gem_plane) return (RotatePlane90(front_plane, gem_plane.ZAxis)) def SetGemView(gem_guid): # get the gem planes top_plane = sd.GetPlane(gem_guid) front_plane = GetGemFrontPlane(top_plane) right_plane = GetGemRightPlane(top_plane) # collect the viewports viewports = [] for view in sc.doc.Views: viewports.append(view.MainViewport) # set bottom to top, back to front, and left to right for vp in viewports: if vp.Name == 'Bottom': vp.Name = 'Top' elif vp.Name == 'Back': vp.Name = 'Front' elif vp.Name == 'Left': vp.Name = 'Right' # put the parallel viewports in plan view of the gem plane for vp in viewports: if vp.Name == 'Top': vp.SetConstructionPlane(top_plane) vp.SetToPlanView(top_plane.Origin, top_plane.XAxis, top_plane.YAxis, True) elif vp.Name == 'Front': vp.SetConstructionPlane(front_plane) vp.SetToPlanView(front_plane.Origin, front_plane.XAxis, front_plane.YAxis, True) elif vp.Name == 'Right': vp.SetConstructionPlane(right_plane) vp.SetToPlanView(right_plane.Origin, right_plane.XAxis, right_plane.YAxis, True) # zoom into the gem in all viewports gem_brep = rs.coercebrep(gem_guid) bbox = gem_brep.GetBoundingBox(True) gem_brep.Dispose() bbox.Inflate(0.1) # this ensures we back off of the zoom just a bit corners = bbox.GetCorners() rs.ZoomBoundingBox(corners, None, True) gem_guid = rs.GetObject('Select a gem to align the views to', rs.filter.polysurface, False, False, IsGem, False) if gem_guid: rs.Command('_4View _Enter _4View _Enter') SetGemView(gem_guid) rs.Command('_GumballAlignment _CPlane') else: app.WriteLine('No gem was selected.') 