# File: 3d-object-generation/main_server.py
import os
from flask import Flask, request, jsonify
import numpy as np

print("AI Server is ready (using geometric simulation for testing).")

app = Flask(__name__)

@app.route('/generate', methods=['POST'])
def generate():
    data = request.get_json()
    prompt = data.get('prompt')
    if not prompt: 
        return jsonify({"error": "Prompt is required"}), 400
    
    print(f"Received generation request for prompt: '{prompt}'")
    
    # Create output directory (use local output when not in Docker)
    output_dir = "/workspace/output" if os.path.exists("/workspace") else "./output"
    if not os.path.exists(output_dir): 
        os.makedirs(output_dir)
    
    # Generate a simple geometric OBJ file for testing
    safe_prompt = "".join(c for c in prompt.lower() if c.isalnum() or c in (' ', '_')).rstrip()
    safe_prompt = "_".join(safe_prompt.split())[:40]
    output_filename = f"ai_gen_{safe_prompt}.obj"
    output_path = os.path.join(output_dir, output_filename)
    
    # Create a simple OBJ file with a geometric shape (cube-like structure for jewelry top)
    obj_content = """# Generated by Aura AI Server
# Simple geometric jewelry element
v 0.0 0.0 0.0
v 1.0 0.0 0.0
v 1.0 1.0 0.0
v 0.0 1.0 0.0
v 0.0 0.0 1.0
v 1.0 0.0 1.0
v 1.0 1.0 1.0
v 0.0 1.0 1.0
# Cube faces
f 1 2 3 4
f 5 6 7 8
f 1 2 6 5
f 2 3 7 6
f 3 4 8 7
f 4 1 5 8
"""
    
    with open(output_path, "w") as f:
        f.write(obj_content)
        
    print(f"Generated geometric test model at: {output_path}")
    return jsonify({"file_path": output_path, "message": "Generation successful"})

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "healthy", "message": "AI server is running"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)